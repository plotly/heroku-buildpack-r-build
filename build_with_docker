#!/bin/bash

#
# use this script to build the R binaries with the heroku docker image locally
#

shopt -s extglob

# fail fast
set -e

# debug
# set -x

R_VERSION="$1"
BUILD_NO="${2:-`date +%Y%m%d-%H%M`}"
STACK="${3:-heroku-18}"
IMAGE="heroku/$(echo "$STACK" | cut -d'-' -f1):$(echo "$STACK" | cut -d'-' -f2)"
DOCKERFILE="Dockerfile-$(echo "$STACK" | cut -d'-' -f2)"

# check arguments
if ([ -z "$R_VERSION" ] || [ -z "$BUILD_NO" ]); then
  echo
  echo "USAGE: $0 VERSION [BUILD_NO]"
  echo
  echo "  R_VERSION      The R version to package."
  echo "                 E.g. 3.4.0"
  echo
  echo "  BUILD_NO       Optionally, the build number."
  echo "                 Defaults to todays date and current time, in the form \"YYYYMMDD-HHMM\"."
  echo
  exit 1
fi

function topic() {
  echo "=====> $*"
}

BUILDPACK_ARCHIVE="R-$R_VERSION-binaries-$BUILD_NO.tar.gz"
BUILDPACK_ARCHIVE_LATEST="R-$R_VERSION-binaries-latest.tar.gz"
TAG="plotly/heroku-buildpack-r-v$R_VERSION-$STACK:$BUILD_NO"

# for checking which version of the build script was used, output to STDOUT
# so that it gets included in the build log output file
echo "#======================================================================"
echo "# $0"
cat $0
echo "#======================================================================"
echo "# Dockerfile"
cat $DOCKERFILE
echo "#======================================================================"
echo "# Environment"
set
echo "#======================================================================"

#======================================================================
topic 'Building image'

# ensure latest heroku images
docker pull "$IMAGE"
docker pull "${IMAGE}-build"

# build the image
docker build \
  --build-arg R_VERSION="$R_VERSION" \
  --build-arg BUILD_NO="$BUILD_NO" \
  --label "R_VERSION=$R_VERSION" \
  --label "BUILD_NO=$BUILD_NO" \
  --tag $TAG \
  -f $DOCKERFILE \
  .

#======================================================================
topic 'Checking image'

# check if R installed okay
docker run -t \
  --rm \
  "$TAG" \
  fakechroot fakeroot chroot /app/.root /usr/bin/R -e "capabilities()"

#======================================================================
topic 'Extracting archive'

# create unoptimized archive of /app
docker run -t \
  -v $(pwd):/var/tmp \
  --rm \
  "$TAG" \
  /var/tmp/create_archive $R_VERSION $BUILD_NO $STACK

#======================================================================
topic 'Optimizing archive size'

# create optimized archive of /app
# use the clean base image to ensure runtime dependencies match
docker run -t \
  -v $(pwd):/var/tmp \
  --rm \
  "$IMAGE" \
  /var/tmp/create_package $R_VERSION $BUILD_NO $STACK

#======================================================================
topic 'Testing archive'

# test
docker run -t \
  -v $(pwd):/var/tmp \
  --rm \
  "$IMAGE" \
  /var/tmp/test_package $R_VERSION $BUILD_NO $STACK

#======================================================================
# topic 'Uploading archive'

# upload to S3
# aws s3 cp $BUILDPACK_ARCHIVE \
#   "s3://heroku-buildpack-r/$STACK/$BUILDPACK_ARCHIVE" \
#   --acl=public-read \
#   --profile=heroku-buildpack-r \
#   --quiet

# echo
# echo "After testing the build, make it current by running the following:"
# echo
# echo " aws s3 cp s3://heroku-buildpack-r/$STACK/$BUILDPACK_ARCHIVE \\ "
# echo "   s3://heroku-buildpack-r/$STACK/$BUILDPACK_ARCHIVE_LATEST \\ "
# echo "   --acl=public-read \\ "
# echo "   --profile=heroku-buildpack-r "
# echo

echo "Finished! The R binaries have been compressed and are ready for upload."
